'use strict';const isBrowser=require('./isBrowser');const applyStyle=require('./applyStyle');const stringifyObject=require('./stringifyObject');const defaultFormatters={c:function(token){return token.content;},d:function(token){if(isNaN(token.arg))return token.content;const parsedValue=parseFloat(token.arg);return token.content.replace(token.tag,parsedValue);},i:function(token){if(isNaN(token.arg))return token.content;const parsedValue=parseInt(token.arg,10);return token.content.replace(token.tag,parsedValue);},o:function(token){if(typeof token.arg!=='object')return token.content;const parsedValue=stringifyObject(token.arg,{indent:'  ',inlineCharacterLimit:32});return token.content.replace(token.tag,parsedValue);},O:function(token){if(typeof token.arg!=='object')return token.content;const parsedValue=stringifyObject(token.arg,{indent:'  ',inlineCharacterLimit:12});return token.content.replace(token.tag,parsedValue);},s:function(token){return token.content.replace(token.tag,token.arg.toString());}};const defaultProps={enableCodeMap:false,formatters:{},codeMap:{},disableCodeMap:false};class Formatter{constructor(props){this.props=Object.assign({},defaultProps,props);this._formatters=Object.assign({},defaultFormatters,this.props.formatters);this._codeMap=Object.assign({},this.props.codeMap);}format(str){for(var _len=arguments.length,args=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}if(args.length===0){return{stringValue:this.props.disableCodeMap?str:this._replaceCodeMap(str),args:args};}const tokens=this._tokenize(str,args);const result=this._parseTokens(tokens);if(result.colorArgs.length>0){const applied=applyStyle(result.colorArgs);args.push(applied);}return{stringValue:this.props.disableCodeMap?result.parsed:this._replaceCodeMap(result.parsed),args:args.length>0?args:''};}_parseTokens(tokens){let parsed='',colorArgs=[];tokens.forEach(token=>{if(token.specifier==='c')colorArgs.push(token.arg);if(this._formatters[token.specifier]){return parsed+=this._formatters[token.specifier](token);}parsed+=token.content;});if(colorArgs.length>0&&isBrowser()){colorArgs=colorArgs.map(function(colorArg){return applyStyle(colorArg.toString().split('_'));});}parsed=this._applyStyles(parsed,colorArgs);return{parsed:parsed,colorArgs:colorArgs};}_replaceCodeMap(str){if(!this._codeMap)return str;const re=/(:(.*?):)/g;let match=re.exec(str);while(match){if(this._codeMap.hasOwnProperty(match[2])){str=str.replace(match[1],this._codeMap[match[2]]);}match=re.exec(str);}return str;}_applyStyles(str,params){if(params.length===0)return str;if(isBrowser())return str;let index,content='';const colorMap=[];do{index=str.indexOf('%c');if(index===-1)continue;colorMap.push(index);str=str.slice(0,index)+str.slice(index+2,str.length);}while(index>=0);if(colorMap.length>0&&colorMap.slice(-1)[0]<str.length){colorMap.push(str.length);}for(let i=0,len=colorMap.length;i<len;i++){let left=colorMap[i];let right=colorMap[i+1];let styles=params.length>0?params.shift().toString().split('_'):[];let inner=str.slice(left,right);let applied=applyStyle(styles,inner);if(i===0&&left>0)applied=str.slice(0,left)+applied;content+=applied;}return content;}_tokenize(str,params){if(!str)return[];const tokens=[];let tag='',specifier='',arg='',content='';const colorMatch=str.match(/%c/g)||'';const colorCount=colorMatch.length;const colorParams=params.splice(0,colorCount);for(var i=0,len=str.length;i<len;i++){if(str[i]==='%'&&typeof str[i+1]==='string'){if(tag){tokens.push({tag,content,arg,specifier});tag='';content='';arg='';specifier='';}tag=str[i]+str[i+1];specifier=str[i+1];arg=tag==='%c'?this._getColorParam(colorParams):params.shift()||'';}content+=str[i];}if(content.length>0){tokens.push({tag:tag||'',content:content||'',arg:arg||'',specifier:specifier||''});}return tokens;}_getColorParam(params){let colorParams=params.shift()||'';if(Array.isArray(colorParams)){colorParams=isBrowser()?colorParams[1]||'':colorParams[0]||'';}return colorParams;}}module.exports=Formatter;